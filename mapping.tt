#CLASS {mapping} OPEN

#ACTION {Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa mapping.tt$}
{
	#nop /* this action can be removed but is used to document the file and   */;
	#nop /* it's functionality.                                               */;
	#nop /*                                                                   */;
	#nop /* external dependencies...                                          */;
	#nop /*      alias {killclass}                                            */;
	#nop /*           located in general.tt                                   */;
	#nop /*           used to kill as needed map related classes              */;
	#nop /*                                                                   */;
	#nop /*      alias {load}                                                 */;
	#nop /*           located in general.tt                                   */;
	#nop /*           used to load as needed map related classes              */;
	#nop /*                                                                   */;
	#nop /*      alias {saveclass}                                            */;
	#nop /*           located in general.tt used as part of mportloc to save  */;
	#nop /*           the added port location                                 */;
	#nop /*                                                                   */;
	#nop /*      mapport.tt                                                   */;
	#nop /*           must exist for the map to locate the current room on    */;
	#nop /*           load or after various teleportation events in game      */;
	#nop /*                                                                   */;
	#nop /*                                                                   */;
	#nop /* aliases and usage                                                 */;
	#nop /*      disembark                                                    */;
	#nop /*           exits the map and activates mapport.tt so that we don't */;
	#nop /*           have to do fancy matching and map tricks to get to the  */;
	#nop /*           right room after a ship voyage.  does require that all  */;
	#nop /*           disembark points be in the mapport.tt file or the map   */;
	#nop /*           will pause until we enter a listed room just like       */;
	#nop /*           teleporting.                                            */;
	#nop /*                                                                   */;
	#nop /*      en <hole|worm|rift|well|portal>                              */;
	#nop /*           exits the map and activates mapport.tt so that we don't */;
	#nop /*           mess up the map when we teleport.                       */;
	#nop /*                                                                   */;
	#nop /*      jump <n|s|e|w|u|d>                                           */;
	#nop /*           used to track movement in rooms where jump is a valid   */;
	#nop /*           move method. full direction of the any abbreviation for */;
	#nop /*           them are acceptable for the parameter                   */;
	#nop /*                                                                   */;
	#nop /*      mavoid <room num/name>                                       */;
	#nop /*           sets the avoid flag in the map for the current room, or */;
	#nop /*           for the <room num/name> if specified.                   */;
	#nop /*           useful for floor less rooms when using mrun to move.    */;
	#nop /*                                                                   */;
	#nop /*      mcolor <rd|shop|inn|bank|water>                              */;
	#nop /*           set the color of the room on the map.  leave the        */;
	#nop /*           pramameter blank for normal white.                      */;
	#nop /*                                                                   */;
	#nop /*      mdoor <n|s|e|w|u|d> <word>                                   */;
	#nop /*           creates a simple door on the map with attending command */;
	#nop /*           to open it when moved through. is one directional and   */;
	#nop /*           must be done on both sides of the door. direction can be*/;
	#nop /*           full word or any abbreviation                           */;
	#nop /*                                                                   */;
	#nop /*      mdrag set <drag string>                                      */;
	#nop /*           sets the command that will be used when mdrag <dir> is  */;
	#nop /*           used. <drag string> should be a comma sep list of items */;
	#nop /*           to drag                                                 */;
	#nop /*                                                                   */;
	#nop /*      mdrag <dir>                                                  */;
	#nop /*           allows the mapper to follow you when you are dragging.  */;
	#nop /*           must use mdrag set first to work properly               */;
	#nop /*                                                                   */;
	#nop /*      mfind <note|name|nn> <string>                                */;
	#nop /*           finds all the rooms where the string is at least part   */;
	#nop /*           of the chosen field (nn for name and notes)             */;
	#nop /*                                                                   */;
	#nop /*      mgoto <room name/num>                                        */;
	#nop /*           move the current room in the map to the room with the   */;
	#nop /*           name that best matches the parameter supplied           */;
	#nop /*                                                                   */;
	#nop /*      mhide <n|s|e|w|u|d>                                          */;
	#nop /*           hides the map on one side of an exit on the map.        */;
	#nop /*           useful when rooms overlap severely and stretching won't */;
	#nop /*           work. directions can be full word or any abbreviation.  */;
	#nop /*                                                                   */;
	#nop /*      mmakeport <two word command> <room name/num>                 */;
	#nop /*           makes a map based portal linking one way between two    */;
	#nop /*           rooms.  ie: mmakeport en crack 123                      */;
	#nop /*                       mmakeport open 2.chest sminn                */;
	#nop /*                                                                   */;
	#nop /*      mmove <exit>                                                 */;
	#nop /*           shortcut to #map move <exit>.  exit can be any defined  */;
	#nop /*           exit for the current room                               */;
	#nop /*                                                                   */;
	#nop /*      mpath <room num>                                             */;
	#nop /*           finds a room in the map and creates a visible trail on  */;
	#nop /*           the display to follow by manually walking               */;
	#nop /*                                                                   */;
	#nop /*      mportals <on|off>                                            */;
	#nop /*           make rooms with portals avoid rooms so that when people */;
	#nop /*           are following you you don't scrape them off on a portal */;
	#nop /*                                                                   */;
	#nop /*      mportloc <string>                                            */;
	#nop /*           creates a simply entry in mapport.tt string must be the */;
	#nop /*           room name of the room you want to match.                */;
	#nop /*                                                                   */;
	#nop /*      mrun <room name/num>                                         */;
	#nop /*           find the quickest path to the named room, turn off map  */;
	#nop /*           writing to prevent lagging, and enter all move commands */;
	#nop /*           needed to get from current loc to chosen room in map    */;
	#nop /*                                                                   */;
	#nop /*      msave                                                        */;
	#nop /*           saves the current map file to $mapname                  */;
	#nop /*                                                                   */;
	#nop /*      mset <note|name> <string>                                    */;
	#nop /*           set the name/note field in the map for the current room */;
	#nop /*           abbreviations are allowed with n being the shortest for */;
	#nop /*           name, and no being the shortest for note                */;
	#nop /*                                                                   */;
	#nop /*      mstatic <on|off>                                             */;
	#nop /*           sets the map's static feature to control if walking     */;
	#nop /*           will create, or link new rooms.                         */;
	#nop /*                                                                   */;
	#nop /*      mstr <n|s|e|w|u|d>                                           */;
	#nop /*           insert a void room in the given direction to stretch    */;
	#nop /*           the map for visual reasons.  parameter can be the full  */;
	#nop /*           direction name all the way down to the letters shown    */;
	#nop /*                                                                   */;
	#nop /*      mundo                                                        */;
	#nop /*           undoes the last map move/addition.  as far as I can     */;
	#nop /*           tell deletions can't be undone.                         */;
	#nop /*                                                                   */;
	#nop /*      mupdate                                                      */;
	#nop /*           Updates the file being used as output to display the    */;
	#nop /*           map using tail.                                         */;
	#nop /*                                                                   */;
	#nop /*      unloadmap <n>                                                */;
	#nop /*           unloads the map and all the mapping classes. if n is    */;
	#nop /*           specified it does not save it first.  if omitted the    */;
	#nop /*           map is saved first                                      */;
	#nop /*                                                                   */;
	#nop /*                                                                   */;
	#nop /* variables set by class                                            */;
	#nop /*      backflee                                                     */;
	#nop /*           used to store the last direction fled or escaped in     */;
	#nop /*                                                                   */;
	#nop /*      mapcount                                                     */;
	#nop /*           used to count moves made for save timing                */;
	#nop /*                                                                   */;
	#nop /*      mapcountmax                                                  */;
	#nop /*           number to count to with mapcount                        */;
	#nop /*                                                                   */;
	#nop /*      mapdispdims                                                  */;
	#nop /*           <width>x<height> of the map to output to file to tail   */;
	#nop /*                                                                   */;
	#nop /*      mapdrag                                                      */;
	#nop /*           used to hold the drag string for mdrag is set by        */;
	#nop /*           mdrag set.                                              */;
	#nop /*                                                                   */;
	#nop /*      mapsave                                                      */;
	#nop /*           used internally to determine if map file should be      */;
	#nop /*           written every mapcountmax moves or is writing paused    */;
	#nop /*                                                                   */;
	#nop /*      mapstatic                                                    */;
	#nop /*           used to track the status of the state of the static     */;
	#nop /*           flag for the mapper                                     */;
	#nop /*                                                                   */
}
{1}

#ACTION {%i{You (?:escape|flee) ([nsewud])(?:or?u?th|e?a?st|p|own)ward!}}
{
	#nop /* makes sure we keep the map updated when running from a fight      /*;
	#map move %2;
	#variable backflee %2
}
{5}

#ACTION {Suddenly the darkness falls revealing different surroundings.}
{
	#nop /*	this is the trigger for shifting to activate mapport             /*;
	#map leave;
	load mapport
}
{5}

#ACTION {You try to tell yourself something}
{
	#nop /* detects end of a mrun and tells to you so that mapsave can be set /*;
	#nop /* back to 1                                                         /*;
	#variable mapsave 1
}
{5}

#ACTION {^{You find traces of tracks leading (\w)\w*\.}}
{
	#nop /* makes sure we keep the map updated when tracking                  /*;
	#map move %2
}
{5}

#ACTION {{You follow \w* ([nNsSeEwWuUdD])\w*}}
{
	#nop /* makes sure we keep the map updated when following someone         /*;
	#map move %2
}
{5}

#ALIAS {.{[newsudNEWSUD0-9]+}}
{
	#variable {isdig} {0};
	#variable {movestr} {};
	#parse {%1} {thischar}
	{
		#regexp {$thischar} {{[0-9]}} {#if {$isdig}{#var {movestr}{$movestr$thischar}}{#var {movestr} {$movestr;#$thischar};#var {isdig} {1}}};
		#regexp {$thischar} {{[newsudNEWSUD]}} {#if {$isdig}{#var {movestr} {$movestr $thischar};#var {isdig} {0}}{#var {movestr} {$movestr;$thischar}}}
	};
	#showme {$movestr};
	$movestr;
	#unvariable {movestr};
	#unvariable {thischar};
	#unvariable {isdig}
}
{5}

#ALIAS {%i{mdrag set (.*)}}
{
	#regexp {%2} {^c(?:l(?:e(?:ar?)?)?)?$} {#var {mapdrag} {}};
	#else
	{
		#variable {mapdrag} {};
		#variable {mapdragholder} {%2};
		#replace {mapdragholder} {,} {;};
		#foreach {$mapdragholder} {i}
		{
			#if {"$mapdrag" != ""}
			{
				#variable {mapdrag} {$mapdrag drag $i}
			};
			#else
			{
				#variable {mapdrag} {drag $i}
			};
			#unvariable mapdragholder
		}
	}
}
{4}

#ALIAS {%i{disembark}}
{
	#nop /* this is used to activate mapport when exiting a ship with         */;
	#nop /* disembark                                                         */;
	#map leave;
	load mapport;
	disemb
}
{5}

#ALIAS {%i{en (hole|worm|rift|well|portal)}}
{
	#nop /* this is an alias to activate the mapport class on entering a      */;
	#nop /* common mass teleportation method                                  */;
	#map leave;
	load mapport;
	ent %2
}
{5}

#ALIAS {%i{jump (n(?:o(?:r(?:th?)?)?)?|s(?:o(?:u(?:th?)?)?)?|e(?:a(?:st?)?)?|w(?:e(?:st?)?)?|up?|d(?:o(?:wn?)?)?)}}
{
	jum %2;
	#map move %2
}
{5}

#ALIAS {%i{mavoid(?: ([a-z 0-9]*))?}}
{
	#if {"%2" != ""}
	{
		#map at %2 #map roomflag avoid
	};
	#else
	{
		#map roomflag avoid
	}
}
{5}

#ALIAS {%i{mcolor (\w*)}}
{
	#variable {roomtype} {@mlowercase{%2}};
	#unvariable {result};
	#map set roomcolor <$mcolor[$roomtype]>;
	#unvariable rmcolr;
	#unvariable roomtype;
	mupdate
}
{5}

#ALIAS {%i{mdoor ((?:\w+ (?:[0-9]{0,2}\.)?\w*)|n(?:o(?:r(?:th?)?)?)?|s(?:o(?:u(?:th?)?)?)?|e(?:a(?:st?)?)?|w(?:e(?:st?)?)?|up?|d(?:o(?:wn?)?)?)} %w}
{
	#map dig %2;
	#map exit %2 command {open %3 %2;%2}
}
{5}

#ALIAS {%i{mdrag ((?:\w+ (?:[0-9]{0,2}\.)?\w*)|n(?:o(?:r(?:th?)?)?)?|s(?:o(?:u(?:th?)?)?)?|e(?:a(?:st?)?)?|w(?:e(?:st?)?)?|up?|d(?:o(?:wn?)?)?)}$}
{
	mmove %2;
	$mapdrag %2
}
{5}

#ALIAS {%i{mfind  ?(no(?:te?)?|n(?:a(?:m(?:e)?)?)?|nn) (.*)}}
{
	#variable {mroomvar} {@mlowercase{%2}};
	#variable {mroomval} {@mlowercase{%3}};
	#unvariable {result};
	#regexp {$mroomvar} {^{nn|no?}} {#switch {"&1"}{#case {"no"}{#map list {} {} {} {} {%*$mroomval%*}};#case {"nn"}{#map list {} {} {} {} {%*$mroomval%*};#map list {%*$mroomval%*}};#case {"n"}{#map list {%*$mroomval%*}}}}
}
{5}

#ALIAS {%i{mgoto ((?:\d|\w).*)}}
{
	#map goto {%2}
}
{5}

#ALIAS {%i{mhide (n(?:o(?:r(?:th?)?)?)?|s(?:o(?:u(?:th?)?)?)?|e(?:a(?:st?)?)?|w(?:e(?:st?)?)?|up?|d(?:o(?:wn?)?)?)}}
{
	#map exitflag %2 hide;
	mupdate
}
{5}

#ALIAS {%i{mmakeport (\w* [a-z.0-9]*) ([a-z 0-9]*)}}
{
	#map dig {%2} {%3}
}
{5}

#ALIAS {%i{mmove ((?:\w+ (?:[0-9]{0,2}\.)?\w*)|n(?:o(?:r(?:th?)?)?)?|s(?:o(?:u(?:th?)?)?)?|e(?:a(?:st?)?)?|w(?:e(?:st?)?)?|up?|d(?:o(?:wn?)?)?)}}
{
	#map move %2;
	mupdate
}
{5}

#ALIAS {%i{mpath (/d+)}}
{
	#map find %2;
	mupdate
}
{5}

#ALIAS {%i{mportals (\w+)}}
{
	#foreach {488;1069} {room}
	{
		#map at $room #MAP get roomflag lavoid;
		#if {("$lavoid" == "1" && "%2" == "on") || ("$lavoid" == "0"  && "%2" == "off")}
		{
			#map at $room #MAP roomflag avoid
		};
		#unvariable lavoid
	}
}
{5}

#ALIAS {%i{mportloc ((?:\w|\d).*)}}
{
	#map {get} {roomvnum} {mportvnum};
	load mapport;
	#class mapport open;
	#line {substitute} {variables} {#act {^%2{(?: \(Shadowed\))?}}{portto $mportvnum}};
	#class mapport close;
	saveclass mapport;
	#unvariable mportvnum;
	msave;
	l
}
{5}

#ALIAS {%i{mrun ?((?:\w|\d).*)}}
{
	#variable mapsave 0;
	#variable {mroomname} {@mlowercase{%2}};
	#unvariable {result};
	#map run {$mroomname};
	t $me $mroomname;
	mupdate;
	#map write $mapname;
	#unvariable mroomname
}
{5}

#ALIAS {%i{msave}}
{
	#map write $mapname
}
{5}

#ALIAS {%i{mset ?(no(?:te?)?|n(?:a(?:m(?:e)?)?)?) (.*)}}
{
	#variable {mroomvar} {@mlowercase{%2}};
	#variable {mroomval} {@mlowercase{%3}};
	#unvariable {result};
	#regexp {$mroomvar} {^{no?}} {#switch {"&1"}{#case {"n"}{#variable setfield roomname};#case {"no"}{#variable setfield roomnote}}};
	#if {"$setfield" != ""}
	{
		#map set $setfield {$mroomval}
	};
	#unvariable setfield;
	#unvariable mroomvar;
	#unvariable mroomval
}
{5}

#ALIAS {%i{mstatic (on|off)}}
{
	#map flag static %2;
	#if {"%2" == "on"}
	{
		#variable {mapstatic} {1};
		#showme {you say map is now static}
	};
	#else
	{
		#variable {mapstatic} {0};
		#showme {you say map is set to create by walking (non-static)}
	}
}
{5}

#ALIAS {%i{mstr (n(?:o(?:r(?:th?)?)?)?|s(?:o(?:u(?:th?)?)?)?|e(?:a(?:st?)?)?|w(?:e(?:st?)?)?|up?|d(?:o(?:wn?)?)?)}$}
{
	#variable {mdir} {@mlowercase{%2}};
	#unvariable {result};
	#regexp {$mdir} {^{[nsewud]}} {#map insert &1 void};
	#unvariable mdir;
	mupdate
}
{5}

#ALIAS {%i{mundo}}
{
	#map undo;
	mupdate
}
{5}

#ALIAS {%i{mupdate}}
{
	#line {substitute} {variables} {#map {map} {$mapdispdims} {mapdisp.txt} {a}}
}
{5}

#ALIAS {%i{unloadmap(?: (n))?}}
{
	#if {"%2" != "n"}
	{
		#map write $mapname
	};
	killclass mapping;
	killclass mapport;
	killclass mapmistake;
	killclass trans;
	#variable {mapname} {};
	#map destroy
}
{5}

#EVENT {MAP ENTER ROOM}
{
	mupdate;
	#if {$mapsave}
	{
		#if {$mapcount < $mapcountmax}
		{
			#math mapcount {$mapcount + 1}
		};
		#else
		{
			#variable mapcount 0;
			msave
		}
	}
}

#FUNCTION {mlowercase}
{
	#regexp {%1} {{[a-zA-Z]}} {#format {mltarg} {%l} {%1}};
	#else
	{
		#variable {mltarg} {%1}
	};
	#variable {result} {$mltarg};
	#unvariable {mltarg}
}

#VARIABLE         {backflee}  {}
#VARIABLE         {mapcount}  {0}
#VARIABLE         {mapcountmax}  {30}
#VARIABLE         {mapdispdims}  {145x32}
#VARIABLE         {mapdrag}  {}
#VARIABLE         {mapping}  {1}
#VARIABLE         {mapsave}  {1}
#VARIABLE         {mapstatic}  {}
#VARIABLE         {mcolor}  {{bank}{130}{default}{170}{inn}{150}{rd}{230}{shop}{160}{water}{240}}

#CLASS {mapping} CLOSE
