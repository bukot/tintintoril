#CLASS {general} OPEN

#ACTION {Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaageneral.tt$}
{
	#nop /* this action can be removed but is used to document the file and   */;
	#nop /* it's functionality.                                               */;
	#nop /* dependencies...                                                   */;
	#nop /*      {classset.tt}                                                */;
	#nop /*           must be present to make use of auto class feature load  */;
	#nop /*           and name assignment                                     */;
	#nop /*                                                                   */;
	#nop /*      {combat.tt}                                                  */;
	#nop /*           needed to make use of common combat features            */;
	#nop /*                                                                   */;
	#nop /*      {espeak unix modual}                                         */;
	#nop /*           must be present to make use of text to speech features  */;
	#nop /*                                                                   */;
	#nop /*      {mapping.tt}                                                 */;
	#nop /*           must be present to make use of map features             */;
	#nop /*                                                                   */;
	#nop /*      {mapport.tt}                                                 */;
	#nop /*           must be present to make proper use of mapping auto      */;
	#nop /*           locate features                                         */;
	#nop /*                                                                   */;
	#nop /*                                                                   */;
	#nop /* aliases and usage                                                 */;
	#nop /*      {statcall on|off}                                            */;
	#nop /*           will turn the stat caller on or off                     */;
	#nop /*                                                                   */;
	#nop /*      {tloot <on|off|group>}                                       */;
	#nop /*           sets the auto looter mode.  allows for abreviation of   */;
	#nop /*           options and use or not of spaces.                       */;
	#nop /*                                                                   */;
	#nop /*      {astat <string>}                                             */;
	#nop /*           will send a tell to katumi and get the advanced stats   */;
	#nop /*           for an item (string value)                              */;
	#nop /*                                                                   */;
	#nop /*      {killclass <word>}                                           */;
	#nop /*           shortcut for #class <word> kill                         */;
	#nop /*                                                                   */;
	#nop /*      {load <word>}                                                */;
	#nop /*           shortcut for #read <word>.tt                            */;
	#nop /*                                                                   */;
	#nop /*      {loadmap <string>}                                           */;
	#nop /*           saves and closes currently loaded map then loads the    */;
	#nop /*           specified map and all mapping files.  if you change     */;
	#nop /*           this pay attention to the order you do things so you    */;
	#nop /*           don't destroy your map file by accident.                */;
	#nop /*                                                                   */;
	#nop /*      {logon <word>}                                               */;
	#nop /*           creates a session named <word> and connects to the mud  */;
	#nop /*                                                                   */;
	#nop /*      {oepn}                                                       */;
	#nop /*           replaces it with open.  I make this typo alot           */;
	#nop /*                                                                   */;
	#nop /*      {opne}                                                       */;
	#nop /*           see oepn                                                */;
	#nop /*                                                                   */;
	#nop /*      {resetclass <word>}                                          */;
	#nop /*           kills the class named <word>.tt and reloads it from     */;
	#nop /*           disk.  depends on saveclass from same file              */;
	#nop /*                                                                   */;
	#nop /*      {saveclass <word>}                                           */;
	#nop /*           saves the class named <word>.tt                         */;
	#nop /*                                                                   */;
	#nop /*      {setme <word>}                                               */;
	#nop /*           sets the value of $me to <word> formatted as all lower  */;
	#nop /*           several processes could set the value of this var so    */;
	#nop /*           this makes normalizing it easier                        */;
	#nop /*                                                                   */;
	#nop /*      {speechoff}                                                  */;
	#nop /*           disables the speech processes in case of spam overload  */;
	#nop /*           but allows it to be restarted automatically.            */;
	#nop /*                                                                   */;
	#nop /*      {stat <word>}                                                */;
	#nop /*           see astat, but uses the abbreviated stat from katumi    */;
	#nop /*                                                                   */;
	#nop /*      {loot <string>}                                              */;
	#nop /*           get or gget all from <string> if string is ommited it   */;
	#nop /*           loots corpse automatically if only a number it supplied */;
	#nop /*           it loots <string>.corpse automatically                  */;
	#nop /*                                                                   */;
	#nop /*                                                                   */;
	#nop /* variables set by class                                            */;
	#nop /*      {caller}                                                     */;
	#nop /*           used to determine if condition caller is active         */;
	#nop /*                                                                   */;
	#nop /*      {class}                                                      */;
	#nop /*           used to store the current loaded character class        */;
	#nop /*                                                                   */;
	#nop /*      {classcheck} used to determine if a score command should be  */;
	#nop /*           sent to the mud so the current class can be auto grabbed*/;
	#nop /*                                                                   */;
	#nop /*      {encond}                                                     */;
	#nop /*           used by stat tracker to store the last enemy condition  */;
	#nop /*                                                                   */;
	#nop /*      {enemy}                                                      */;
	#nop /*           used to track the currently engaged enemy's name when in*/;
	#nop /*           battle                                                  */;
	#nop /*                                                                   */;
	#nop /*      {loot}                                                       */;
	#nop /*           used to determine status of auto looter                 */;
	#nop /*                                                                   */;
	#nop /*      {mapname}                                                    */;
	#nop /*           name of the map file that is loaded, or blank.  it is   */;
	#nop /*           initiated here to allow testing it's value in general.tt*/;
	#nop /*                                                                   */;
	#nop /*      {speechon}                                                   */;
	#nop /*           used to determine if the speech routine has been called */;
	#nop /*           yet                                                     */
}
{1}

#ACTION {%* briefly reveals a red aura}
{
	gsay %1 is cursed!;
	#showme ::reshowforspeech::$me says %1 is cursed!
}
{5}

#ACTION {%* seems to be blinded!}
{
	#nop gsay %1 is blind!;
	#showme $me says %1 is blind!
}
{5}

#ACTION {%* suddenly looks speechless!}
{
	gsay %1 is being weally weally quite (silenced);
	#showme $me says %1 is silenced;
	#class silence kill
}
{5}

#ACTION {%w has just given you %w consent.}
{
	group %1 Let's go get ded!
}
{5}

#ACTION {You have learned something new about %*!}
{
	gsay %1 up!;
	#showme {you say %1 up!}
}
{5}

#ACTION {^Type the # or name of a character above to login or choose an action below.}
{
	#class rogue kill;
	#class cleric kill;
	#class psionicist kill;
	#class warrior kill;
	#variable {classcheck} {1};
	load classset;
	#if {$mapping}
	{
		load mapport
	}
}
{5}

#ACTION {^You raise a level!$}
{
	gsay Level UP!;
	#showme {You say Level UP}
}
{5}

#ACTION {^You receive %* XP (%*) experience.}
{
	#if {&loot}
	{
		#if {$loot}
		{
			loot
		}
	}
}
{5}

#ACTION {{< (\d{1,4})h/(\d{1,4})H(?: \d{1,3}p/\d{1,3}P)? (\d{1,4})v/(\d{1,4})V (.*)>}}
{
	#variable {pextra} {%6};
	#variable enemy {};
	#if {&etarg}
	{
		#class etarg kill
	};
	#regexp {$pextra} {{E:\s*(\w*)}} {#variable {enemy} {&2};};
	#if {"$enemy" != "" && $caller}
	{
		#regexp {$pextra} {{EC: ((?:nasty wounds)|(?:pretty hurt)|(?:awful)) (?:EP:)}} {#if {"&2" != "$encond"}{#var encond {&2};gsay $enemy is at $encond;};}
	};
	#else
	{
		#unvariable {encond}
	};
	#if {$groupcheck}
	{
		#class groupcheck kill;
		#unvariable stattarg;
		statfix
	};
	#if {$stateffects}
	{
		#class kill stateffects
	};
	#class glistadd kill;
	#if {$classcheck}
	{
		#variable classcheck 0;
		score
	};
	#unvariable pextra
}
{5}

#ACTION {~%i{^((?:\x1B\[(?:;?\d{1,3})+(?:m|K))*\w+(?:\x1B\[(?:;?\d{1,3})+(?:m|K))* (?:(?:\x1B\[(?:;?\d{1,3})+(?:m|K))*\(H\)(?:\x1B\[(?:;?\d{1,3})+(?:m|K))* )?(?:\x1B\[(?:;?\d{1,3})+(?:m|K))*(?:says?|tells?|group-says?|OOC|GCC|NHC|LFG|shouts?|(?:(?:group-)?projects? ')|(?:responds to your petition)|(?:responds to your group)).*)}}
{
	#format timestamp {%t} {{%H:%M:%S}};
	#line log chatlog.txt {%0 :: $timestamp};
	#unvariable timestamp;
	#variable {saytxt} {%1};
	#replace {saytxt} {{\x1B.*?[m|K]}}{};
	#replace {saytxt}{'}{};
	#replace {saytxt}{"}{};
	#if {$speechon}
	{
		#nop
	};
	#else
	{
		#variable {speechon}{1};
		#run speech espeak;
		#speech #kill;
		#session -
	};
	#regexp {$saytxt} {%i{(katumi tells.*|notice: the lfg ch)}} {#NOP;};
	#else
	{
		#speech {$saytxt}
	};
	#if {&statuses}
	{
		#variable statorlist {};
		#foreach {$tracked} {i}
		{
			#if {"$statorlist" != ""}
			{
				#variable statorlist {$statorlist|$i}
			};
			#else
			{
				#variable statorlist {$i}
			}
		};
		#foreach {$stats} {thisstat}
		{
			#regexp {$saytxt} {%i{^($statuses) .*(?:$statreg[$thisstat]).*?(?:out|off|expired|down|faded|bu-bye!)}} {statset @btarg{&2} $thisstat out;statfix;}
		};
		#unvariable thisstat
	};
	#unvariable {saytxt};
	#unvariable statorlist
}
{5}

#ALIAS {%istatcall{ ?(on|of)?.*}}
{
	#if {"%2" != ""}
	{
		#switch {"%2"}
		{
			#case {"on"}
			{
				#variable {caller} {1}
			};
			#case {"of"}
			{
				#variable {caller} {0}
			}
		};
		statcall
	};
	#else
	{
		#variable callerstat off;
		#if {$caller}
		{
			#variable callerstat on
		};
		#showme {You say stat caller is $callerstat};
		#unvariable callerstat
	}
}
{5}

#ALIAS {%itloot{ ?(of|on|gr)?.*}}
{
	#switch {"%1"}
	{
		#case {"of"}
		{
			#variable loot 0;
			tloot
		};
		#case {"on"}
		{
			#variable loot 1;
			tloot
		};
		#case {"gr"}
		{
			#variable loot 2;
			tloot
		};
		#default
		{
			#switch {$loot}
			{
				#case {1}
				{
					say loot is on
				};
				#case {2}
				{
					say loot is for group (and thats good enough for me)
				};
				#default
				{
					say loot is off
				}
			}
		}
	}
}
{5}

#ALIAS {astat %1}
{
	tell katumi astat %1
}
{5}

#ALIAS {killclass %w}
{
	#class %1 kill
}
{5}

#ALIAS {load %w}
{
	#read %1.tt
}
{5}

#ALIAS {loadmap}
{
	#if {"$mapname" != ""}
	{
		#map write $mapname;
		killclass mapping;
		killclass mapport;
		killclass mapmistake;
		killclass trans;
		#map destroy
	};
	#class mapkil open;
	#class mapkil write mapdisp.txt;
	#class mapkil kill;
	load mapping;
	#variable mapname %1;
	#map read $mapname;
	load mapport;
	load mapmistake
}
{5}

#ALIAS {logon %w}
{
	#session %1 50.57.109.188 9999
}
{5}

#ALIAS {oepn}
{
	open
}
{5}

#ALIAS {opne}
{
	open
}
{5}

#ALIAS {resetclass %w}
{
	#class %1 kill;
	load %1
}
{5}

#ALIAS {saveclass %w}
{
	#class %1 write %1.tt
}
{5}

#ALIAS {setme %w}
{
	#format {me} {%l} {%1}
}
{5}

#ALIAS {speechoff}
{
	#speech #zap;
	#unvariable speechon
}
{5}

#ALIAS {stat %1}
{
	tell katumi stat %1
}
{5}

#ALIAS {{loot(?: (.*))?}}
{
	#variable {ltarg} {corpse};
	#showme %2;
	#regexp {%2} {{([0-9]+)}} {#var ltarg &1.corpse};
	#regexp {%2} {%i{([0-9]*[a-zA-Z\.]+)}} {#var ltarg &1};
	#if {$loot == 2}
	{
		gget all $ltarg
	};
	#else
	{
		get all $ltarg
	};
	#unvariable ltarg
}
{5}

#EVENT {PROGRAM START}
{
	#split
}

#EVENT {SESSION CONNECTED}
{
	load combat;
	load spellout;
	load statwin
}

#FUNCTION {btarg}
{
	#if {"%1" != ""}
	{
		#format {btname} {%l} {%1};
		#regexp {"$btname"} {{[1-9]}} {#IF {&t[%1]}{#RETURN $t[%1]};#ELSE {#VAR {result} {self}}};
		#else
		{
			#if {"$btname" == "me"}
			{
				#variable {result} {self}
			};
			#else
			{
				#variable {result} {$btname}
			}
		};
		#unvariable btname
	};
	#else
	{
		#if {&t[1]}
		{
			#variable {result} {$t[1]}
		};
		#else
		{
			#variable {result} {$me}
		}
	}
}

#MACRO {\eOk}
{
	d
}

#MACRO {\eOm}
{
	u
}

#MACRO {\eOr}
{
	s
}

#MACRO {\eOt}
{
	w
}

#MACRO {\eOu}
{
	l
}

#MACRO {\eOv}
{
	e
}

#MACRO {\eOx}
{
	n
}

#TAB              {@delkor}
#TAB              {@gormal}
#TAB              {@iamtux}
#TAB              {@lilithelle}
#TAB              {@lilmeshay}
#TAB              {bukot}
#TAB              {lilabipple}
#TAB              {lilebeple}
#TAB              {lilithelle}
#TAB              {mixxillezissiy}
#TAB              {nilebbeple}
#TAB              {zenpegeble}
#VARIABLE         {caller}  {0}
#VARIABLE         {class}  {}
#VARIABLE         {classcheck}  {0}
#VARIABLE         {enemy}  {}
#VARIABLE         {general}  {1}
#VARIABLE         {loot}  {0}
#VARIABLE         {mapname}  {}
#VARIABLE         {speechon}  {0}

#CLASS {general} CLOSE
